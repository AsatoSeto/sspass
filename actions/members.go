package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/vuerecipe/models"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	uuid "github.com/satori/go.uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Member)
// DB Table: Plural (members)
// Resource: Plural (Members)
// Path: Plural (/members)
// View Template Folder: Plural (/templates/members/)

// MembersResource is the resource for the Member model
type MembersResource struct {
	buffalo.Resource
}

func (m MembersResource) scope(c buffalo.Context) *pop.Query {
	tx := c.Value("tx").(*pop.Connection)
	return tx.BelongsTo(c.Value("band"))
}

// List gets all Members. This function is mapped to the path
// GET /members
func (v MembersResource) List(c buffalo.Context) error {
	members := &models.Members{}

	// Retrieve all Members from the DB
	if err := v.scope(c).All(members); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(members))
}

// Show gets the data for one Member. This function is mapped to
// the path GET /members/{member_id}
func (v MembersResource) Show(c buffalo.Context) error {
	// Allocate an empty Member
	member := &models.Member{}

	// To find the Member the parameter member_id is used.
	if err := v.scope(c).Find(member, c.Param("member_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.JSON(member))
}

// New default implementation. Returns a 404
func (v MembersResource) New(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Create adds a Member to the DB. This function is mapped to the
// path POST /members
func (v MembersResource) Create(c buffalo.Context) error {
	// Allocate an empty Member
	member := &models.Member{}

	// Bind member to the html form elements
	if err := c.Bind(member); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	member.BandID = uuid.FromStringOrNil(c.Param("band_id"))

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(member)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(201, r.JSON(member))
}

// Edit default implementation. Returns a 404
func (v MembersResource) Edit(c buffalo.Context) error {
	return c.Error(404, errors.New("not available"))
}

// Update changes a Member in the DB. This function is mapped to
// the path PUT /members/{member_id}
func (v MembersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Member
	member := &models.Member{}

	if err := v.scope(c).Find(member, c.Param("member_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Member to the html form elements
	if err := c.Bind(member); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(member)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Render errors as JSON
		return c.Render(400, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(member))
}

// Destroy deletes a Member from the DB. This function is mapped
// to the path DELETE /members/{member_id}
func (v MembersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Member
	member := &models.Member{}

	// To find the Member the parameter member_id is used.
	if err := v.scope(c).Find(member, c.Param("member_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(member); err != nil {
		return errors.WithStack(err)
	}

	return c.Render(200, r.JSON(member))
}

func loadBand(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		if id := c.Param("band_id"); id != "" {
			tx := c.Value("tx").(*pop.Connection)
			band := &models.Band{}
			if err := tx.Find(band, id); err != nil {
				return errors.WithStack(err)
			}
			c.Set("band", band)
		}
		return next(c)
	}
}
